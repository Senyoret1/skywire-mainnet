// Code generated by mockery v1.0.0. DO NOT EDIT.

package arclient

import (
	context "context"

	cipher "github.com/SkycoinProject/dmsg/cipher"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockAPIClient is an autogenerated mock type for the APIClient type
type MockAPIClient struct {
	mock.Mock
}

// BindSTCPH provides a mock function with given fields: ctx, dialCh
func (_m *MockAPIClient) BindSTCPH(ctx context.Context, dialCh <-chan cipher.PubKey) (<-chan RemoteVisor, error) {
	ret := _m.Called(ctx, dialCh)

	var r0 <-chan RemoteVisor
	if rf, ok := ret.Get(0).(func(context.Context, <-chan cipher.PubKey) <-chan RemoteVisor); ok {
		r0 = rf(ctx, dialCh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan RemoteVisor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, <-chan cipher.PubKey) error); ok {
		r1 = rf(ctx, dialCh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindSTCPR provides a mock function with given fields: ctx, port
func (_m *MockAPIClient) BindSTCPR(ctx context.Context, port string) error {
	ret := _m.Called(ctx, port)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindSUDPH provides a mock function with given fields: ctx, conn, localPort
func (_m *MockAPIClient) BindSUDPH(ctx context.Context, conn net.Conn, localPort string) (<-chan RemoteVisor, error) {
	ret := _m.Called(ctx, conn, localPort)

	var r0 <-chan RemoteVisor
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn, string) <-chan RemoteVisor); ok {
		r0 = rf(ctx, conn, localPort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan RemoteVisor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, net.Conn, string) error); ok {
		r1 = rf(ctx, conn, localPort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BindSUDPR provides a mock function with given fields: ctx, port
func (_m *MockAPIClient) BindSUDPR(ctx context.Context, port string) error {
	ret := _m.Called(ctx, port)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockAPIClient) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Health provides a mock function with given fields: ctx
func (_m *MockAPIClient) Health(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalTCPAddr provides a mock function with given fields:
func (_m *MockAPIClient) LocalTCPAddr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LocalUDPAddr provides a mock function with given fields:
func (_m *MockAPIClient) LocalUDPAddr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteHTTPAddr provides a mock function with given fields:
func (_m *MockAPIClient) RemoteHTTPAddr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteUDPAddr provides a mock function with given fields:
func (_m *MockAPIClient) RemoteUDPAddr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ResolveSTCPH provides a mock function with given fields: ctx, pk
func (_m *MockAPIClient) ResolveSTCPH(ctx context.Context, pk cipher.PubKey) (VisorData, error) {
	ret := _m.Called(ctx, pk)

	var r0 VisorData
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey) VisorData); ok {
		r0 = rf(ctx, pk)
	} else {
		r0 = ret.Get(0).(VisorData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cipher.PubKey) error); ok {
		r1 = rf(ctx, pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveSTCPR provides a mock function with given fields: ctx, pk
func (_m *MockAPIClient) ResolveSTCPR(ctx context.Context, pk cipher.PubKey) (VisorData, error) {
	ret := _m.Called(ctx, pk)

	var r0 VisorData
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey) VisorData); ok {
		r0 = rf(ctx, pk)
	} else {
		r0 = ret.Get(0).(VisorData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cipher.PubKey) error); ok {
		r1 = rf(ctx, pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveSUDPH provides a mock function with given fields: ctx, pk
func (_m *MockAPIClient) ResolveSUDPH(ctx context.Context, pk cipher.PubKey) (VisorData, error) {
	ret := _m.Called(ctx, pk)

	var r0 VisorData
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey) VisorData); ok {
		r0 = rf(ctx, pk)
	} else {
		r0 = ret.Get(0).(VisorData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cipher.PubKey) error); ok {
		r1 = rf(ctx, pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveSUDPR provides a mock function with given fields: ctx, pk
func (_m *MockAPIClient) ResolveSUDPR(ctx context.Context, pk cipher.PubKey) (VisorData, error) {
	ret := _m.Called(ctx, pk)

	var r0 VisorData
	if rf, ok := ret.Get(0).(func(context.Context, cipher.PubKey) VisorData); ok {
		r0 = rf(ctx, pk)
	} else {
		r0 = ret.Get(0).(VisorData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cipher.PubKey) error); ok {
		r1 = rf(ctx, pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
